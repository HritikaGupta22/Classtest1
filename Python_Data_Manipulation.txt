# ---*---*---*---*---*---*---*---*---*---*---
"""
DATA MANIPULATION WITH PYTHON - NUMPY & PANDAS
**********************************************
Software : PYTHON 3.8.x | Distribution : Anaconda | IDE: Spyder, Jupyter, Google Colab
Author : Dr. Amarnath Mitra | Email : amarnath.mitra@gmail.com
Updated : Aug, 2023
"""
# ---*---*---*---*---*---*---*---*---*---*--- 

# Data Manipulation with Python using Numpy & Pandas : Topics
# -----------------------------------------------------------

# 1.0. Numpy : Arrays and Matrices
# 1.1. Arrays : Dimensions
# 1.2. Arrays : Manipulation
# 1.3. Arrays : Concatenation
# 1.4. Arrays : Statistics
# 1.5. Numpy Application : Linear Algebra

# 2.0. Pandas : Series & Dataframes
# 2.1. Pandas Series
# 2.2. Dataframes : Create, Read, Write
# 2.3. Dataframes : Reshape {Sort, Subset, Filter, Group, Pivot, Melt} 
# 2.4. Dataframe : Combine {Concat, Merge}
# 2.5. Pandas Application : Describe Data | Specify Categorical Data

# *************************************************************************************************

'''
1. Numpy Library is used to Create and Manipulate n-Dimensional Arrays & Matrices.
2. Manipulation of Numpy Arrays & Matrices are Better & Faster than Native Python Arrays & Matrices and hence are Preferred.
3. Numpy Application : Linear Algebra 
'''

# 1. Numpy : Arrays & Matrices
# ----------------------------

# Required Library
import numpy as np

# 1.1. Arrays : Dimensions 
# ------------------------

# 1-Dimensional Array
a1 = np.array([1, 2, 3, 4], dtype=float); a1 
type(a1)
a1.shape # Dimension = 4 Rows, 1 Column

# 2-Dimensional Array
a2 = np.array([[11, 12, 13], [21, 22, 23]]); a2 
type(a2)
a2.shape # Dimension = 2 Rows, 3 Columns

# 3-Dimensional Array
a3 = np.array([[[11, 12, 13], [21, 22, 23]], [[31, 32, 33], [41, 42, 44]]]); a3 
type(a3)
a3.shape # Dimension = 2 Layers, 2 Rows, 3 Columns

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# 1.2. Arrays : Manipulation
# --------------------------

# 1-d Array Indexing
a1[0] # Extract First Element

# 1-d Array Reshape >> 2-d Array {4 Rows, 1 Columns >> 2 Rows, 2 Columns}
a1.reshape(2, 2) 

# 2-d Array Indexing
a2[0] # Extract First Row Elements [11, 12, 13]
a2[1,2] # Extract Second Row Third Element = [23]

# 2-d Array Reshape >> 2-d Array {2 Rows, 3 Columns >> 3 Rows, 2 Columns}
a2.reshape(3, 2) 

# 2-d Array Reshape >> 3-d Array
a2.reshape(2, 2, 2) 

# 3-d Array Indexing
a3[0] 

# 3-d Array Reshape >> {2 Layers, 3 Rows, 2 Columns}
a3.reshape(2, 3, 2) 


# Array Reshape >> 3-d --> 2-d Array
a3.reshape(3,4) 

# 2-d Array Transpose : (2, 4) --> (4, 2)
a2.T 

# 3-d Array Transpose : (2, 2, 3) --> (3, 2, 2)
a3.T 

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# 1.3. Arrays : Concatenation
# ---------------------------

a11 = np.array([[1, 2], [3, 4]]); a11
a12 = np.array([[5, 6]]); a12

# All Element Concatenation to 1-d Array
a11_12 = np.concatenate((a11, a12), axis=None); a11_12 

# Row-wise Array Concatenation
a11_12_row = np.concatenate((a11, a12), axis=0); a11_12_row 

# Column-wise Array Concatenation
a11_12_column = np.concatenate((a11.T, a12.T), axis=1); a11_12_column 

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# 1.4 Arrays : Statistics
# -----------------------

a4 = np.array([1, 23, 4]); a4
a5 = np.array([56, 7, 8]); a5

# Concatenate & Reshape
a45 = np.concatenate((a4, a5)).reshape(2,3); a45

# Array Min
np.amin(a45) 
np.amin(a45, axis=0) # Column Min over Row
np.amin(a45, axis=1) # Row Min over Column

# Array Max
np.amax(a45) 
np.amax(a45, axis=0) # Column Max over Row
np.amax(a45, axis=1) # Row max over Column

# Array Sum
np.sum(a45) 
np.sum(a45, axis=0) # Column Sum over Row
np.sum(a45, axis=1) # Row Sum over Column

# Array Mean
np.mean(a45) 
np.mean(a45, axis=0) # Column Mean over Row
np.mean(a45, axis=1) # Row Mean over Column

# Array Std.Dev.
np.std(a45) 
np.std(a45, axis=0) # Column Std.Dev. over Row
np.std(a45, axis=1) # Row Std.Dev. over Column

# Array Covariance & Correlation
np.cov(a4, a5) # Covariance
np.corrcoef(a4, a5) # Pearson Correlation

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# 1.5 Numpy Application : Linear Algebra
# --------------------------------------

# Required Library
import numpy as np
from numpy import linalg as npla

a6 = np.array([[1, 3], [2, 4]]); a6
a7 = np.array([[5, 7], [6, 8]]); a7

# Vector Multiplication : {1*5 + 3*7 + 2*6 + 4*8}
a67_vm = np.vdot(a6, a7); a67_vm

# Matrix Multiplication : {1*5 + 3*6, 1*7 + 3*8, 2*5 + 4*6, 2*7 + 4*8}
a67_mm1 = np.dot(a6, a7); a67_mm1 
a67_mm2 = np.matmul(a6, a7); a67_mm2

# Matrix : Multiplication
a67 = np.dot(a6, a7); a67

# Matrx : Determinant
npla.det(a67) 

# Matrix : Inverse
npla.inv(a67)

# Matrix : Eigen Value & Eigen Vector
eig_val, eig_vec = npla.eig(a67)
eig_val
eig_vec

# System of Linear Equations : Solution
'''
Eq1 : x + 2y = 4 
Eq2 : 3x + 2y = 8
Solve for x & y
'''
a8 = np.array([[1, 2], [3, 2]]); a8
a9 = np.array([4, 8]); a9

# Solution >> x = 2 | y = 1
npla.solve(a8, a9)  

# *************************************************************************************************

'''
1. Pandas Library is used to Create and Manipulate Dataframes (Data Represented in Tabular Form).
2. Pandas Application : Open Source Data Analysis and Manipulation
'''

# 2. Pandas : Series & Dataframes
# -------------------------------

# Required Library
import pandas as pd

# 2.1. Pandas Series (with Index)
# -------------------------------

# Series with Natural Index : {0, 1, 2, ...}
my_series1 = ['a', 'b', 'c', 'd'] 
ps1 = pd.Series(my_series1); ps1

# Series with Given Index : {'a', 'b', 'c', ...}
my_series2 = {'a': 12, 'b': 34, 'c': 56} 
ps2 = pd.Series(my_series2); ps2

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# 2.2. Pandas Dataframe
# ---------------------

# Create Dataframe : Using Python Dict
my_data = {
    'Name': ['Alexa', 'Bixby', 'Cortana', 'Jarvis', 'Lyra', 'Robin', 'Siri'], 
    'Gender': ['Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female'], 
    'Education': ['Postgraduate', 'Graduate', 'Postgraduate', 'Doctorate', 'Graduate', 'Graduate', 'Postgraduate'], 
    'Age': [24, 21, 25, 28, 23, 22, 24], 
    'Monthly_Salary': [27000, 25000, 30000, 35000, 26000, 24000, 28000]
    }
my_df = pd.DataFrame(my_data); my_df

# Write Dataframe (to Current Working Directory)
my_df.to_csv('my_csv_file.csv') # Write to CSV Format File with Default Index
my_df.to_excel('my_excel_file.xlsx', index=False) # Write to MS EXCEL Format File without Index

# Read Dataframe (from Current Working Directory)
my_df_csv = pd.read_csv('my_csv_file.csv') # Read CSV File 
my_df_excel = pd.read_excel('my_excel_file.xlsx') # Read MS EXCEL File 

# ************************************************************************************************* 

# 2.3. Reshape Dataframe : Sort, Subset, Filter, Group, Melt, Pivot
# -----------------------------------------------------------------

my_df
my_df.columns
my_df.index

# Sort Dataframe
my_df.sort_values('Age')  # Sort Values by Specific Column in Ascending Order (by Default)
my_df.sort_values(['Age', 'Monthly_Salary'], ascending=[True, False]) # Sort Values by 2 or more Columns in Ascending or Descending Order

# Subset Dataframe
my_df['Name'] # Extract Data of Specific Column as Series
my_df[['Name']] # # Extract Data of Specific Column as Dataframe
my_df[['Name', 'Age']] # Extract Data of Multiple Columns as Dataframe
my_df.iloc[1] # iloc[Row_Num, Col_Num] : Extract Data by Specific {Row or Column or Both} Number as Series
kk = my_df.loc[0, 'Age'] # loc[row_name, col_name] : Extract Data by Specific {Row or Column or Both} Name as Value (String or Number)

# Filter Dataframe
my_df[my_df['Gender'] == 'Female'] # Filter Data with Single Criteria
my_df[(my_df['Age'] < 25) & (my_df['Education'] == 'Graduate')] # Filter Data with Multiple Criteria 

# Group Dataframe
my_df.groupby('Education')['Age', 'Monthly_Salary'].mean()

# Pivot Table from Dataframe 
my_df_pivot = pd.pivot_table(my_df, index='Gender', columns='Education', values='Age', aggfunc='median'); my_df_pivot

# Create Dummy Dataframe : using Python Dict
panel_data = {
    'Company': ['ABC', 'ABC', 'DEF', 'DEF', 'GHI', 'GHI'],
    'Year': [2001, 2002, 2001, 2002, 2001, 2002],
    'Revenue': [1234, 2345, 3456, 4567, 5678, 6789]
    }
panel_df = pd.DataFrame(panel_data); panel_df

# Pivot Dataframe
panel_df_pivot = pd.pivot(panel_df, index='Company', columns='Year', values='Revenue'); panel_df_pivot
panel_df_pivot.reset_index(level='Company', inplace=True); panel_df_pivot

# Melt Dataframe
panel_df_pivot_melt =  pd.melt(panel_df_pivot, id_vars=['Company'], value_name='Revenue'); panel_df_pivot_melt
panel_df_pivot_melt_sorted = panel_df_pivot_melt.sort_values(by=['Company']); panel_df_pivot_melt_sorted

# ************************************************************************************************* 

# 2.4. Combine Dataframe : Concat, Merge
# --------------------------------------
my_df_f = my_df[my_df['Gender'] == 'Female']; my_df_f
my_df_m = my_df[my_df['Gender'] != 'Female']; my_df_m

# Concatenate Dataframe [axis=0, axis=1, join={outer, inner}]
my_df_fm = pd.concat([my_df_f, my_df_m], ignore_index=True); my_df_fm

# Merge Dataframe {left, right, inner, outer, cross}
my_df_merged_left = pd.merge(my_df_f[['Education', 'Age']], my_df_m[['Education', 'Monthly_Salary']], on='Education', how='left'); my_df_merged_left
my_df_merged_inner = pd.merge(my_df_f[['Education', 'Age']], my_df_m[['Education', 'Monthly_Salary']], on='Education', how='inner'); my_df_merged_inner

# ************************************************************************************************* 

# 2.5. Pandas Application : Data Description
# ------------------------------------------

# Dataframe
my_df 

# Display 1st n Rows
my_df.head(n=5)

# Display last n Rows   
my_df.tail(n=5) 

# Display Dataframe Dimension : Number of Rows & Columns
my_df.shape 

# Display Dataframe Information : Index, Column-wise Datatypes & Memory information
my_df.info() 

# Display Summary Statistics : For Numerical Columns or Variables (only)
my_df.describe() 

# Specify Categorical Data : As Nominal
my_df['Gender']=pd.Categorical(my_df['Gender'])
my_df.info()

# Specify Categorical Data : As Ordinal
ordered_category = ['Graduate', 'Postgraduate', 'Doctorate'] # Order = Graduate < Postgraduate < Doctorate
my_df['Education']=pd.Categorical(my_df['Education'], categories=ordered_category, ordered=True)
my_df.info()

# *************************************************************************************************

